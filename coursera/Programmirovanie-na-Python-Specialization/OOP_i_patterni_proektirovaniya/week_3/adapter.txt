Вы продолжаете писать игру, и настало время разобраться с расчетом освещенности на карте. Так как это не совсем
тривиальная задача, вы хотели бы использовать готовое решение, а не писать свое собственное. Вам удалось найти
готовый класс, который решает задачу, однако интерфейс этого класса не совместим с вашей игрой.

Вам нужно написать адаптер, который позволил бы использовать найденный вами класс совместно с вашей системой.

Интерфейс класса выглядит следующим образом:


Интерфейс системы выглядит следующим образом:


Класс Light создает в методе __init__ поле заданного размера. За размер поля отвечает параметр, представляющий из себя
кортеж из 2 чисел. Элемент dim[1] отвечает за высоту карты, dim[0] за ее ширину. Метод set_lights устанавливает массив
источников света с заданными координатами и просчитывает освещение. Метод set_obstacles устанавливает препятствия
аналогичным образом. Положение элементов задается списком кортежей. В каждом элементе кортежа хранятся 2 значения:
elem[0] -- координата по ширине карты и elem[1] -- координата по высоте соответственно. Метод generate_lights
рассчитывает освещенность с учетом источников и препятствий.

Пример карты освещенности, полученной этим методом изображен на следующем рисунке:


В системе в конструкторе создается двухмерная, карта, на которой источники света обозначены как 1, а препятствия как -1.
 Метод get_lightening принимает в качестве аргумента объект, который должен посчитывать освещение. У объекта вызывается
 метод lighten, который принимает карту объектов и источников света и возвращает карту освещенности.

Вам необходимо написать адаптер MappingAdapter. Прототип класса вам дан в качестве исходного кода.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Список частых ошибок, совершаемых студентами, при решении данного задания.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

1. Решение содержит дополнительный или отладочный код. Решение должно содержать только реализацию класса MappingAdapter.

2. Использование сторонних библиотек (например, numpy) приводит к ошибкам импорта. В задании можно использовать только
модули стандартной библиотеки Python.

3. Изменение сигнатуры метода lighten класса MappingAdapter. Из описания задания -

" У объекта вызывается метод lighten, который принимает карту объектов и источников света и ВОЗВРАЩАЕТ карту
освещенности".

Некоторые студенты пишут реализацию класса MappingAdapter таким образом, что вызов метода lighten изменяет значения
атрибутов, определенных внутри класса.

4. Игнорирование различий в способах хранения данных в системе и классе Light. Из описания задания -

"Класс Light создает в методе __init__ поле заданного размера. За размер поля отвечает параметр, представляющий из себя
кортеж из 2 чисел. Элемент dim[1] отвечает за высоту карты, dim[0] за ее ширину. .... Положение элементов задается
списком кортежей. В каждом элементе кортежа хранятся 2 значения: elem[0] -- координата по ширине карты и elem[1] --
координата по высоте соответственно.…".

Естественное представление двумерного массива в виде вложенных списков, как правило такое, что первый индекс отвечает
за высоту, а второй за ширину. То есть при обращении к массиву arr[5][3] - вернется третий элемент из 5-го вложенного
списка. В классе Light, исходя из условия задания, индексация в массиве получается "перевернутой". Поэтому это нужно
учитывать при создании dim и списков с координатами источников света и препятствий. Не учет этого момента приводит к
ошибке грейдера:  Тест 3. При попытке рассчитать освещение выбрасывается исключение IndexError.

5. Использование «map» в качестве имени переменной для хранения объекта карты. В стандартной библиотеке Python есть
функция с таким же названием. Называя переменную так, вы «затираете» встроенную функцию. В данной задаче эта ошибка
возможно не приведет к side-эффектам, но такая привычка может дорого обойтись в реальном проекте.
